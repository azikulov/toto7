/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 868:
/***/ (() => {

var cardEventButtonsBlock = document.querySelectorAll('.card-event__buttons-wrapper');
cardEventButtonsBlock.forEach(function (buttonsBlock) {
  buttonsBlock.addEventListener('click', function (e) {
    var buttons = buttonsBlock.querySelectorAll('.card-event__btn');
    buttons.forEach(function (btn) {
      btn.classList.remove('active');
    });
    e.target.classList.add('active');
  });
});

/***/ }),

/***/ 83:
/***/ (() => {

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var ratesSorted = document.querySelector('.rates__sorted');
if (ratesSorted) {
  // eslint-disable-next-line func-names
  ratesSorted.addEventListener('click', function (e) {
    _toConsumableArray(this.children).forEach(function (btn) {
      btn.classList.remove('active');
    });
    e.target.classList.add('active');
  });
}

/***/ }),

/***/ 986:
/***/ (() => {

var burger = document.querySelector(".header__burger");
var navMenu = document.querySelector(".navigation");
var menuItems = document.querySelectorAll(".navigation__link");
function openMenu() {
  this.classList.toggle("active");
  navMenu.classList.toggle("isShow");
  document.body.classList.toggle("hidden");
}
menuItems.forEach(function (item) {
  item.addEventListener("click", function () {
    navMenu.classList.remove("isShow");
    document.body.classList.remove("hidden");
  });
});
burger.addEventListener("click", openMenu);

/***/ }),

/***/ 503:
/***/ (() => {

var tabsBlock = document.querySelector(".content__tabs");
var tabsContent = document.querySelectorAll(".content__data");
if (tabsBlock) {
  tabsBlock.addEventListener("click", function (e) {
    if (e.target === e.currentTarget) return;
    var tabs = tabsBlock.querySelectorAll(".content__tab-btn");
    tabs.forEach(function (tab) {
      tab.classList.remove("active");
    });
    tabsContent.forEach(function (data) {
      data.hidden = true; // eslint-disable-line no-param-reassign
      if (data.id === e.target.dataset.tab) {
        data.hidden = false; // eslint-disable-line no-param-reassign
      }
    });

    e.target.classList.add("active");
  });
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

;// CONCATENATED MODULE: ./js/focusedActivePopap.js
var blockElementsList = [];
var INTERACTIVE_SELECTORS = "a, button, input, textarea, [tabindex]";
function addFocusForPopUp(form) {
  var elements = document.querySelectorAll(INTERACTIVE_SELECTORS);
  elements.forEach(function (el) {
    if (!form.contains(el)) {
      if (el.getAttribute("tabindex") !== "-1") {
        el.setAttribute("tabindex", "-1");
        blockElementsList.push(el);
      }
    }
  });
}
function removeFocusByPopUp() {
  while (blockElementsList.length !== 0) {
    var element = blockElementsList.pop();
    element.setAttribute("tabindex", "0");
  }
}

;// CONCATENATED MODULE: ./js/pop-up.js

var openPopUpButtons = document.querySelectorAll(".auth__btn");
var authForms = document.querySelectorAll(".pop-up__form");
var popUp = document.querySelector(".overlay");
var signupBtn = document.querySelector(".signup-btn");
var closeBtn = document.querySelector(".pop-up__close");
function closeForm() {
  if (!authForms) return;
  popUp.hidden = true;
  authForms.forEach(function (form) {
    form.hidden = true; // eslint-disable-line no-param-reassign
  });

  removeFocusByPopUp();
}
if (closeBtn) {
  closeBtn.addEventListener("click", closeForm);
}
if (openPopUpButtons) {
  openPopUpButtons.forEach(function (btn) {
    btn.addEventListener("click", function () {
      addFocusForPopUp(popUp);
      authForms.forEach(function (form) {
        if (form.name === btn.dataset.formName) {
          form.hidden = false; // eslint-disable-line no-param-reassign
        }
      });

      popUp.hidden = false;
    });
  });
}
if (popUp) {
  popUp.addEventListener("click", function (e) {
    if (e.target === e.currentTarget) closeForm();
  });
}
if (signupBtn) {
  signupBtn.addEventListener("click", function () {
    authForms.forEach(function (form) {
      form.hidden = !form.hidden; // eslint-disable-line no-param-reassign
    });
  });
}

document.addEventListener("keydown", function (e) {
  var key = e.key;
  if (key === "Escape") closeForm();
});

// Временная функция авторизации для демонстрации верстки ...
if (authForms) {
  authForms.forEach(function (form) {
    if (form.name === "login") {
      form.addEventListener("submit", function (e) {
        e.preventDefault();
        if (form.elements.email.value === "test@test.test") {
          localStorage.setItem("isAuth", "true");
          document.location.reload();
        }
      });
    }
  });
}
// EXTERNAL MODULE: ./js/card-events.js
var card_events = __webpack_require__(868);
// EXTERNAL MODULE: ./js/tabs.js
var tabs = __webpack_require__(503);
// EXTERNAL MODULE: ./js/filter-rates.js
var filter_rates = __webpack_require__(83);
// EXTERNAL MODULE: ./js/openMenu.js
var openMenu = __webpack_require__(986);
;// CONCATENATED MODULE: ./js/index.js






window.addEventListener("load", function () {
  document.body.classList.remove("isLoading");
});

// Временная функция для демонстрации верстки ...
document.addEventListener("DOMContentLoaded", function () {
  var isAuth = localStorage.getItem("isAuth");
  var authBlock = document.querySelector(".header__auth");
  var userBlock = document.querySelector(".header__user");
  var logoutBtn = document.querySelector(".user__logout-btn");
  if (isAuth) {
    authBlock.hidden = true;
    userBlock.hidden = false;
  }
  logoutBtn.addEventListener("click", function () {
    localStorage.removeItem("isAuth");
    authBlock.hidden = false;
    userBlock.hidden = true;
    document.location.href = "/";
  });
});
})();

/******/ })()
;